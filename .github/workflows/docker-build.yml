name:  Docker build

on:
  workflow_dispatch:  # 支持手动触发
  push:
    tags:
      - "v*"  # 通过tag触发构建（例如v1.2.3）

env:
  IMAGE_NAME: isaac_ros_nvblox
  DOCKER_REGISTRY: your-dockerhub-username  # 替换为您的DockerHub账号

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码（确保包含Dockerfile和nvidia-isaac.yaml）
      - name: Checkout repository
        uses: actions/checkout@v3  # 网页2的关键操作，确保所有文件被拉取

      # 步骤2：设置跨平台构建环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # 网页2的跨平台构建方案
        with:
          platforms: linux/amd64, linux/arm64  # 支持x86和ARM架构

      # 步骤3：登录DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # 建议使用Token而非密码

      # 步骤4：动态生成镜像标签
      - name: Generate image tags
        id: tags
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          else
            TAG=latest
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # 步骤5：构建并推送镜像（核心步骤）
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .  # 网页2的关键配置，设置构建上下文为当前目录
          file: ./Dockerfile  # 确保Dockerfile路径正确
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.tag }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
